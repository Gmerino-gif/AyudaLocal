import bcrypt from "bcryptjs";
import JsonWebToken from "jsonwebtoken";
import dotenv from "dotenv";
import path from "path";

dotenv.config();

export const usuarios = [{
  user: "a",
  email: "a@a.com",
  password: "$2a$10$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" // Debe ser un hash real
}];

async function login(req, res) {
  const { user, password } = req.body;
  if (!user || !password)
    return res.status(400).send({ status: "Error", message: "Faltan datos" });

  const usuarioARevisar = usuarios.find(usuario => usuario.user === user);
  if (!usuarioARevisar) {
    return res.status(400).send({ status: "Error", message: "Error durante el login" });
  }

  const loginCorrecto = await bcrypt.compare(password, usuarioARevisar.password);
  if (!loginCorrecto) {
    return res.status(400).send({ status: "Error", message: "Error durante el login" });
  }

  const token = JsonWebToken.sign(
    { user: usuarioARevisar.user },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRATION }
  );

  const cookieOption = {
    expires: process.env.JWT_COOKIE_EXPIRES
      ? new Date(Date.now() + parseInt(process.env.COOKIE_EXPIRATION))
      : new Date(Date.now() + 3600000),
    path: "/"
  };

  res.cookie("jwt", token, cookieOption);
  return res.send({ status: "Ok", message: "Login correcto", redirect: "/admin" });
}

async function register(req, res) {
  const { user, email, password } = req.body;
  if (!user || !password || !email) {
    return res.status(400).send({ status: "Error", message: "Faltan datos" });
  }

  const usuarioARevisar = usuarios.find(
    usuario => usuario.user === user || usuario.email === email
  );
  if (usuarioARevisar) {
    return res.status(400).send({ status: "Error", message: "Usuario o email ya registrado" });
  }

  const salt = await bcrypt.genSalt(10);
  const hashPassword = await bcrypt.hash(password, salt);

  const nuevoUsuario = {
    user,
    email,
    password: hashPassword
  };

  usuarios.push(nuevoUsuario);
  console.log(usuarios);
  return res.status(201).send({ status: "Ok", message: "Usuario registrado correctamente", redirect: "/login" });
}

export const methods = {
  login,
  register
};
